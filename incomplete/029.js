/*
Distinct powers

Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

    2^2=4, 2^3=8, 2^4=16, 2^5=32
    3^2=9, 3^3=27, 3^4=81, 3^5=243
    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/
var MAX_NUMBER = 100;

var powString = function(base, exponent) {
  // Check if this complexity is even necessary
  var quickResult = Math.pow(parseInt(base), parseInt(exponent));
  if (Math.abs(quickResult) < Math.pow(2, 53))
    return quickResult;

  var result = 1;
  for (var i = 0; i < exponent; i++) result = multiplyString(result, base);
  return result;
};

var multiplyString = function(x, y) {
  // Check if this complexity is even necessary
  var quickResult = parseInt(x) * parseInt(y);
  if (Math.abs(quickResult) < Math.pow(2, 53))
    return quickResult;

  var a = x.toString();
  var b = y.toString();

  var product = "0";
  var currentResult, currentProduct, carryOver;
  for (var i = a.length-1; i >= 0; i--) {
    currentProduct = "";
    carryOver = 0;
    for (var count = 0; count < (a.length-1) - i; count++)
      currentProduct += "0";

    for (var j = b.length-1; j >= 0; j--) {
      currentResult = (a[i] * b[j]) + carryOver;
      carryOver = Math.floor(currentResult / 10);
      currentProduct = (currentResult % 10) + currentProduct;
    }

    if (carryOver > 0) currentProduct = carryOver.toString() + currentProduct;

    product = addNumString(product, currentProduct);
  }

  return product;
};

var addNumString = function(x, y) {
  // Check if this complexity is even necessary
  var quickResult = parseInt(x) + parseInt(y);
  if (Math.abs(quickResult) < Math.pow(2, 53))
    return quickResult;

  var a = x.toString();
  var b = y.toString();

  var minLength = Math.min(a.length, b.length);
  var lengthDiff = Math.abs(a.length - b.length);

  var c, d;
  if (lengthDiff === 0 || a.length > minLength) {
    c = a;
    d = b;
  } else {
    c = b;
    d = a;
  }

  var sum = "";
  var carryOver = 0;
  var currentResult;
  for (var i = minLength-1; i >= 0; i--) {
    currentResult = parseInt(c[i+lengthDiff]) + parseInt(d[i]) + carryOver;
    carryOver = Math.floor(currentResult / 10);
    sum = (currentResult % 10).toString() + sum;
  }

  var index = lengthDiff-1;
  if (carryOver > 0) {
    while (c[index] === "9") {
      sum = "0" + sum;
      index--
    }

    if (index >= 0) {
      currentResult = parseInt(c[index]) + carryOver;
      sum = currentResult.toString() + sum;
    } else {
      sum = "1" + sum;
      index++;
    }

    return c.slice(0, index) + sum;
  }

  return c.slice(0, index+1) + sum;
};

var terms = {};
var b;
for (var a = 2; a <= MAX_NUMBER; a++) {
  if (a in terms)
    b = Math.floor(MAX_NUMBER / terms[a][1]) + 1;
  else b = 2;

  while (b <= MAX_NUMBER) {
    terms[powString(a, b)] = [a, b];
    b++;
  }
}

console.log(Object.keys(terms).length);

//console.log(multiplyString(2, Math.pow(2, 52)));
//console.log(powString(2, 53));
//console.log(Math.pow(2, 53));
//console.log(addNumString(Math.pow(2, 52), Math.pow(2, 52)));

